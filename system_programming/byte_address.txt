The byte is the smallest addressable unit for a CPU. If you want to set/clear single bits, you first need to fetch the corresponding byte from memory, mess with the bits and then write the byte back to memory.



The word by contrast is biggest chunk of bits with which a processor can do processing (like addition and subtraction) at a time. That definition is a bit fuzzy, as some processor might have different word sizes for different tasks (integer vs. floating point processing for example). The word size is what the majority of operations work with.

A word is made up of one or more bytes. For example, a computer that has 64-bit registers and 64- bit memory addressing typically has 64-bit (8-byte) words

Each set of 8 bits is called a byte. Two bytes together as in a 16 bit machine make up a word , 32 bit machines are 4 bytes which is a double word and 64 bit machines are 8 bytes which is a quad word.


Traditionally, a "word" in computer architectures was generally the smallest addressable unit of memory. And traditionally this has been the same as the machine's general purpose register size. 
However, ever since byte addressing became popular, the concept has become diluted

If you think in terms of registers, the "word size" of a machine is normally assumed to be the same as that of its general-purpose registers. This would be 32 bits on x86, 64 bits on x64. On most architectures, the GPR size is the size of the largest integer on which the CPU can perform simple arithmetic with a single instruction










Difference between 32 bits & 64 bits
https://techterms.com/help/difference_between_32-bit_and_64-bit_systems




32-bits x86 OS can give up to 3 GB of vm adress space... Is it always true ?

You can have 3GB of virtual memory per process (approximately, on many 32-bit Linux), and keep on creating new processes taking up gigabytes upon gigabytes of virtual memory.



In addition to the total limit, there's also a per-process VM limit. This is configurable and (on 32bit linux at least) is at most 3GB, but may be quite a bit less. ulimit -v will tell you this limit or can be used to change it.






max process limit linux
cat /proc/sys/kernel/pid_max
This is the maximum number of unique process identifiers your system can support.


	 Number of process possible in the linux system is UNLIMITED.
But there is a limit on number of process per user(except root who has no limit).
And you can check your user limits with below command (apposite to "max user processes")




If you want to increase the limit on number of process for a particular user(for eg: hadoop ) , you need to make below entry in


hadoop - nproc 500000


There are 2 types of resource limitation: “hard” and “soft”. Hard resource limit defines the physical limit that the user can reach. The “soft” resource limit is manageable by the user. Its value can go up to the “hard” limit.


The system resources are defined in a configuration file located at “/etc/security/limits.conf”. “ulimit”, when called, will report these values.





ulimit --help



cat /proc/PID/limits



Threads

cat /proc/sys/kernel/threads-max

4 KB
The default page size is 4 KB on many architectures

8MB -> default max stack size for any process/thread can grow upto, allocated is 1 page size


Paging is a Memory Management Technique. The Concept 'Paging' is used to remove External Fragmentation.
In this, the Main Memory is divided into parts called as 'Frames' and the process is divided into 'Pages' so that a part of process(a page) can be accommodated in a frame(part of Main Memory). A Page Table keeps track of the pages and where they are present in the Main Memory.
The pages can be present in any frame. The frames need not be contiguous. This is how External Fragmentation is prevented. It is important to note that Page Size = Frame Size.




Nested Class in c++
Nested classes are cool for hiding implementation details.


class List
{
    public:
        List(): head(nullptr), tail(nullptr) {}
    private:
        class Node
        {
              public:
                  int   data;
                  Node* next;
                  Node* prev;
        };
    private:
        Node*     head;
        Node*     tail;
};



